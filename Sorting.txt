  public void SelectionSort(int []arr){
     // 60 , 40 , 50 , 30 , 10 , 20
   int min_index;
   int n=arr.length;
   
   for(int i =0;i<n-1;i++){
       min_index=i;
       for(int j=i+1;j<n;j++){
           if(arr[j]<arr[min_index])
               min_index=j;
       }
       int temp=arr[min_index];
       arr[min_index]=arr[i];
       arr[i]=temp;
   }
    }
   public void print(int arr[])
   {
     for(int i=0;i<arr.length;i++){
         System.out.print(arr[i]+"   ");
   }        
    }
   public int removeDuplicate(int []arr){
           SelectionSort(arr);
       int n=arr.length;
       if(n==0 || n==1 )
           return n;
       int []temp=new int[n];
       int j=0;
       for(int i=0;i<n-1;i++){
           if(arr[i]!=arr[i+1])
               temp[j++]=arr[i];
       }
       temp[j++]=arr[n-1];
       for(int i=0;i<j;i++)
           arr[i]=temp[i];
       return j;
   }
   public void BubbleSort(int arr[]){
        int n=arr.length;
        int counter =0;
        boolean flag=true;
       for(int i=0;i<n-1;i++){           ///  outer loop  number of path 
          for(int j=0;j<n-i-1;j++){
              if(arr[j]>arr[j+1]){
                 int temp=arr[j];
             arr[j]=arr[j+1];
             arr[j+1]=temp;
              }
              flag=false;
              counter++;
          }
          if(flag)
              break;
   }
}
   public void Sort(int arr[],int l,int m,int r){
       int n1=m-l+1;    // size left sub array
       int n2=r-m;     // size right sub array
       // create two array to copy data 
       int L[]=new int [n1];
       int R[]=new int [n2];
       for(int i=0;i<n1;++i)
           L[i]=arr[l+i];
       for(int j=0;j<n2;++j)
           R[j]=arr[m+1+j];
       int i=0,j=0;
       int k=l;
       while(i<n1 && j<n2){
           if(L[i]<=R[j]){
             arr[k]=L[i];
               i++;
           }
           else {
               arr[k]=R[j];
               j++;
           }
           k++;
       }
       while(i<n1){
           arr[k]=L[i];
           i++;
           k++;
       }
       while (j<n2){
           arr[k]=R[j];
           j++;
           k++;
       }
       
   }
   public void MergeSort(int arr[],int l,int r){
       if(1<r){
           int m=l+(r-1)/2;
           MergeSort(arr, l,m);
           MergeSort(arr,m+1, r);
           Sort(arr, l, m, r);
           
       }
   }
   public int partion(int arr[],int ibegin ,int jend){
       int i=ibegin;
       int j=jend;
       int pivot=i;
       while(true){
           while(arr[pivot]<=arr[j] && pivot != j){
               j--;
           }
           if(pivot==j)
               break;
           else if(arr[pivot]>arr[j]){
               int temp=arr[j];
               arr[j]=arr[pivot];
               arr[pivot]=temp;
               pivot=j;
           }
           while(arr[pivot]>=arr[i] && pivot!=i){
               i++;
           }
           if(pivot==i)
               break;
           else if(arr[pivot]<arr[i]){
               int temp=arr[i];
               arr[i]=arr[pivot];
               arr[pivot]=temp;
               pivot=i;
           }
       }
       return pivot;
   }
   public void QuickSort(int arr[],int l ,int h){
       if(l<h){
           int piv=partion(arr,l, h);
           QuickSort(arr, l,piv-1);
           QuickSort(arr,piv+1, h);
       }
   }
   public void heapify(int arr[],int n,int i){
       int l=2*i+1;
       int r=2*i+2;
       int max=i;
       if(l<n && arr[l]>arr[max])
           max=l;
       if(r<n && arr[r]>arr[max])
           max=r;
       if(max!=i){
           int temp=arr[i];
           arr[i]=arr[max];
           arr[max]=temp;
           heapify(arr, n,max);
       }
   }
   public void bulidheap(int arr[],int n){
       for(int i=n/2-1;i>=0;i--){
           heapify(arr,n,i);
       }
   }
    public void heapsort(int arr[],int n){
        bulidheap(arr, n);
        for(int i=n-1;i>=0;i--){
            int temp=arr[0];
            arr[0]=arr[i];
            arr[i]=temp;
            heapify(arr,i,0);
        }
       }
    public int linearSearch(int arr[],int key){
        for(int i=0;i<arr.length;i++){
            if(arr[i]==key)
                return i;
        }
        return -1;
    }
    public int BinarySearch(int arr[],int l,int h,int element){
        while(l<=h){
            int m=(l+h)/2;
            if(arr[m]==element)
                return m;
            if(arr[m]<element)
                h=m-1;
            else 
                l=m+1;
        }
        return -1;
    }
 public static void InsertionSort(int arr[]){
        for(int i=1;i<arr.length;i++){
            int key=arr[i];
            int j=i-1;
            while(j>=0&& arr[j]>key){
                arr[j+1]=arr[j];
                 j=j-1;
            }
            arr[j+1]=key;
        }
    }
  
   
   
   }
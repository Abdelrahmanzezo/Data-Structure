public class DoublyLinkedList {
  Node first;
  Node last;
  int count;
        public DoublyLinkedList(){
            first=last=null;
            count=0;
            
        }
    public boolean isEmpty(){
        return(count==0);
    }
    public void insertfirt(int element){
        Node newnode=new Node(element);
        if(isEmpty()){
            first=last=newnode;
            newnode.next=newnode.prev=null;
        }else{
            newnode.next=first;
            newnode.prev=null;
            first.prev=newnode;
            first=newnode;
        }
        count++;
    }
    public void insertlast(int element){
        Node newnode=new Node(element);
         if(isEmpty()){
            first=last=newnode;
            newnode.next=newnode.prev=null;
         }else{
             newnode.next=null;
             newnode.prev=last;
             last.next=newnode;
             last=newnode;
         }
         count++;
    }
    public void insertatposition(int pos ,int element){
        if(pos < 0  ||pos>count)
            System.out.println("Out of range ..... !");
        else{
            Node newnode=new Node(element);
            if(pos==0)
                insertfirt(element);
            else if (pos==count)
                insertlast(element);
            else{
                Node cur=new Node();
                cur=first;
                for(int i=1;i<pos;i++){
                    cur=cur.next;
                }
                newnode.next=cur.next;
                newnode.prev=cur;
                cur.next=newnode;
                cur.next.prev=newnode;
            }
            count++;
        }
    }
    public void removefirst(){
        if(count==0)
            System.out.println("the list is empty");
    else{
    Node cur=new Node();
    cur=first;
    first=first.next;
    cur=null;
}
        count--;
    }
    public void removelast(){
        if(isEmpty())
            System.out.println("the list is empty..");
        else{
             Node cur=new Node();
            cur=last;
            last=last.prev;
            cur=null;
        }
        count--;
    }
    public void removeitem(int element){
        if(count==0)
            return;
        
        
         
          else{
               if(first.item==element)
              removefirst();
              Node cur=new Node();
              cur=first.next;
              while(cur!=null)
              {
                  if(cur.item==element)
                      break;
                  cur=cur.next;
              }
              if(cur==null)
                  return;
              else if(cur.next==null)
              removelast();
              else{
                  cur.prev.next=cur.next;
                  cur.next.prev=cur.prev;
          }
            
            
            
           count--; 
        }
    }
    public void display(){
        System.out.println("Displaying from the first to last .. ");
        Node cur=new Node();
        cur=first;
        while(cur!=null){
            System.out.print( cur.item+" ");
            cur=cur.next;
        }
        System.out.println();
    }
    public void displayingfromreverse(){
      System.out.println("Displaying from the last to first .. ");
      Node cur=new Node();
       cur=last;
        while(cur!=null){
            System.out.print( cur.item+" ");
            cur=cur.prev;
    }
    }
}
